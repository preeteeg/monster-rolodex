{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","index","key","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAGaA,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACtB,2BACCC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACZI,SAAUH,MCNFI,G,MAAO,SAAAC,GAAK,OACzB,yBAAKJ,UAAU,kBACd,yBAAKK,IAAI,UAAWC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACvB,wBAAIR,UAAU,aAAaI,EAAMG,QAAQE,MACzC,uBAAGT,UAAU,eAAeI,EAAMG,QAAQG,UCF9BC,G,MAAW,SAAAP,GACtB,OAAO,yBAAKJ,UAAU,aACnBI,EAAMQ,SAASC,KAAI,SAACN,EAAQO,GAAT,OACpB,kBAAC,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,UCmCrBS,G,kBApCf,aAAc,IAAD,8BACT,+CAaJjB,aAAc,SAAAkB,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAblC,EAAKC,MAAM,CACTV,SAAS,GACTO,YAAY,IAJL,E,iFAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAM,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACN,SAASe,S,+BAO/B,IAAD,EACsBC,KAAKN,MAA3BV,EADA,EACAA,SAASO,EADT,EACSA,YACTU,EAAiBjB,EAASkB,QAAO,SAAAvB,GACtC,OAAOA,EAAQE,KAAKsB,cAAcC,SAASb,EAAYY,kBAExD,OACE,yBAAK/B,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWF,YAAY,SAASC,aAAc6B,KAAK7B,eACnD,kBAAC,EAAD,CAAUa,SAAUiB,S,GA5BRI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.8af51930.chunk.js","sourcesContent":["import React from 'react'\nimport './search-box.css'\n\nexport const SearchBox = ({placeholder,handleChange}) => (\n   <input \n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n     onChange={handleChange}\n      />\n     \n)","import React from 'react'\nimport './card.styles.css'\nexport const Card = props=>(\n<div className=\"card-container\">\n\t<img alt=\"monster\"  src={`https://robohash.org/${props.monster.id}?set=set2/size=130x130`} />\n\t<h3 className=\"card-name\">{props.monster.name}</h3>\n\t<p className=\"card-detail\">{props.monster.email}</p>\n</div>\n)","import React from 'react'\nimport {Card} from '../card/card.component'\nimport './card-list.styles.css'\n\nexport const CardList = props =>{\n  return <div className=\"card-list\">\n    {props.monsters.map((monster,index)=>(\n    <Card key={monster.id} monster={monster}/>\n   ))\n   } \n   </div>\n}","import React,{Component} from 'react';\nimport {SearchBox} from './components/search-box/search-box.component'\nimport {CardList} from './components/card-list/card-list.component'\nimport './App.css';\n\nclass App extends Component{\nconstructor(){\n    super();\n    this.state={\n      monsters:[],\n      searchField:''\n    }\n}\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=>response.json())\n  .then( users=>this.setState({monsters:users}));\n}\n//arrow function lexically bind this \nhandleChange= e=>{\n  this.setState({searchField:e.target.value})\n}\n\nrender(){\n  const{monsters,searchField}=this.state\n  const filteredMonster= monsters.filter(monster=>{\n   return monster.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n  return(\n    <div className='App'>\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"search\" handleChange={this.handleChange} />\n      <CardList monsters={filteredMonster}/>\n    </div>\n  )\n}\n\n}\n \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}